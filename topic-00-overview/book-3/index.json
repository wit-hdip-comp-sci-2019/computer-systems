


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Networking and Sense HAT",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Network · SenseHat</p>",
  "folder" : "book-3",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Networking and the SenseHat",
    "shortTitle": "Networking and Sense HAT",
    "contentMd" : "# Networking and the SenseHat\r\n\r\nNetwork · SenseHat\r\n\r\n## Objectives\r\n\r\n+ Investigate network configuration on your machine.\r\n+ Write a program and execute it on the SenseHat Emulator.\r\n+ Send a message on the web.\r\n\r\n## Prerequisites\r\n\r\n+ Completed preparatory lab\r\n"
    },
  
    {
    "title": "# The Local Network",
    "shortTitle": "01",
    "contentMd" : "# The Local Network\r\n\r\n## Introduction\r\n\r\nYou will now investigate your local network setup. From a networking perspective, it's a good idea to know:\r\n\r\n- how you connect to the local network.\r\n- the IP address you have on the internet.\r\n- the network interfaces you have on your machine.\r\n\r\nIt may be useful to be able to investigate these details if you need to troubleshoot connectivity and network issues in later labs.  \r\n\r\n## Your Local Network\r\n\r\nYou are likely to be using one of the following systems to connect to the internet:\r\n\r\n- DSL/Fiber wired connection with a home router using an Internet Service Provider (e.g. Eir)\r\n- Mobile Broadband router (sometimes known as a 'hotspot') provided by a mobile network provider (e.g. 3).\r\n- 3rd party wireless provider or general apartment complex wireless connection. \r\n\r\nMost solutions will require that you have some form of physical device that can route network traffic from your home network and the internet (usually called **Router**). You can then connect your devices to the router and you're up and running! Every device that you connect must have a suitable network interface.\r\n\r\n## Your IP address\r\n\r\nAn Internet Protocol address (IP address) is an identifying number for devices connected to a network. An IP address allows a device to communicate with other devices over an IP-based network, for example the internet.\r\n\r\n- Open a terminal window on your machine and, at the command prompt, enter the following command for your Operating System:  \r\n\r\n+ Windows: ``ipconfig``\r\n+ Linux: ``ifconfig``\r\n+ OS X: ``ifconfig``\r\n\r\nYou should see a summary of the network interfaces on your machine:\r\n\r\n![ipconfig on Windows](./img/ipconfig.jpg)\r\n\r\nYour network set up will look different depending on various factors such as how you connect (wired, wifi) and how many network interfaces you have on your machine. More than likely, you should have at least 2 at the moment (assuming you completed the on-site lab); Ethernet(wired) and/or Wireless LAN (WiFi).\r\n\r\nSo how do you know which interface you're currently using to connect to the internet? Generally, your Operating System will select the connected interface with the highest speed. If you're 'wired' (usually 100mbit per second or 1000mbit per second) then that's the interface that will be used, otherwise it will fall back to wireless. \r\nYou can usually deduce this from the ipconfig output. To know for sure, you can have a look at the routing table on your machine. The routing table shows what interfaces network traffic will be sent out on.\r\n\r\n- On Windows,Linux and OS X, use the ``netstat –nr`` command to see a summary of the routing information. \r\n- Find the IPv4 Route table. You will see one entry indicated as default(or with a destination of 0.0.0.0). That's the interface used to connect to the internet. \r\n\r\n![Routing Table (Linux)](./img/routing-table.png)\r\n\r\n![Routing Table (Windows)](./img/routing-table-windows.png)\r\n\r\n### Exercise\r\nUsing the above commands, answer the following questions:  \r\n\r\n+ How many interfaces are listed on your machine?\r\n+ What is the ip address of the interface are you using?\r\n+ If not already, start up the virtual machine from the previous lab and run the ifconfig/ipconfig on your host machine again. Is there a new interface now? If so, why do you think it's there?\r\n\r\n## PING\r\n\r\nPING(Packet INternet Groper) sends ECHO_REQUEST packets to the IP address you specify. It’s a handy way to see whether your machine can communicate with the Internet or another machine. However many machines are configured **not** to respond to pings so, if you don't get a response, it doesn't  mean the machine is not connected and available for communication.\r\n\r\nSo you've all connected to the Wifi with your host machines So you should be able to ping each others host machines from your machine. Try the following:\r\n\r\n+ Determine the ip address of your host machine on the local network.\r\n+ Ask your neighbour (or help them) what their IP address is.\r\n+ Ping them by typing *ping* followed by their IP address. All things going well you should see a successful response.\r\n\r\n![Ping your neighbour](./img/ping1.png)  \r\n\r\nYou can also use Ping to check if you can connect to the internet. Type **``ping google.ie``** to see if you can get a response from Google. This time, you should see something like this: \r\n\r\n![Pinging Google](./img/ping2.png)\r\n\r\nNotice that you used a **domain name** this time. In this case, your machine would have used Domain Name System (DNS) to get the IP address for a \"google.ie\". As you can see, in this example the IP address is *209.85.203.94* and we got a successful reply so the virtual machine, pc0, is connected to the internet!  \r\nWe'll cover more about DNS in future coursework.\r\n\r\n\r\n## Tracepath\r\nTracepath is a network troubleshooting utility which shows the number of \"hops\" taken by network \"packets\" to reach a destination and also determine the travelling path through the network. In the terminal session, type **``tracepath www.tssg.ie``** to see the path though the network to the tssg web site. You should see responses similar to the following:  \r\n\r\n![ifconfig](./img/tracepath1.png)  \r\n\r\n+ Also, do a tracepath using a neighbours IP address. Does it complete successfully and how many hops does it take?\r\n\r\n## Private and Public IP addresses\r\n\r\n![Private and Public IP addresses](./img/public-ip.png)  \r\n\r\nYou now know the IP address of your computer on your local area network(LAN). However, this is probably a \"local\" IP address that is just used in your LAN. It is not the IP address that the rest of the internet uses to interact with your computer. Your internet service provider will assign a single public IP address that is used by your computer (and all other devices on your LAN) and your router can translate traffic between local and public IP addresses. There are several  web services that can be used to find out your public IP address.  \r\n\r\n- In a browser, go to [Google](www.google.ie) and search \"what is my IP\". You’ll see the Public IP address of your computer.\r\n\r\n![Public IP Address](./img/google-ip.png) \r\n\r\nIP addresses are managed by the Internet Assigned Numbers Authority (IANA), which has overall responsibility for the Internet Protocol (IP) address pool. \r\nYour public IP address is usually based on a real-world location and can be used to estimate where you are. For example, your IP address can be used to give you weather forecasts for the town you're in or to advertise local services in the area. To see this in action, you can use several web sites that will display your IP address and location.  \r\n\r\n- In a web browser, go to www.acuweather.com and see the result...\r\n"
    },
  
    {
    "title": "# Raspberry Pi Sense HAT Emulator",
    "shortTitle": "02",
    "contentMd" : "# Raspberry Pi Sense HAT Emulator\r\n#### Try a pi before you buy!\r\nAs you know we will be using a Raspberry Pi in the latter part of the module to explore wireless networking and \"device-level\" connected applications. You will need to buy a Raspberry pi and Sense HAT to complete and assignments and labs.\r\nThe Sense HAT(Hardware Attached on Top), the multi-purpose add-on board for the Raspberry Pi that contains various sensors and an array of RGB LEDs. IT was also sent into space as part of the Astro Pi project on the International Space Station.\r\n![Sense HAT](./img/sensehat.jpg)\r\n\r\nHowever, we don't need the Pi and Sense Hat to start working with it. A US-based start-up called Trinket with Raspberry Pi have developed a web-based emulator for Sense Hat. The emulator is a useful development tool as it allows you to test, debug and share applications without putting them on an actual device (you will probably use an emulator for your Mobile App Dev module).  \r\n\r\n![Sense HAT Emulator](./img/sensehatemulator.png)  \r\n\r\n### Programming the Emulator\r\nThe emulator uses a programming language called Python. You have probably not come across Python before but you do have knowledge of programming now and we will use Trinket to \"hack\" an existing code example. Try the following with Trinket:\r\n\r\n+ Open the following Sensor Hat template in Trinket: <a href=\"https://trinket.io/python/a242f4535b\" target=\"_blank\">https://trinket.io/python/a242f4535b</a>\r\n+ Have a close look at the script and try to deduce what's going to happen when you run it.\r\n+ Run the example by clicking the run button.\r\n\r\nAs you can see, it prints the message across the LEDs. See if you can change the program to:\r\n\r\n+ print you name instead of \"HDip Comp Sci\"\r\n+ change the colour to red.\r\n\r\n### Environment Data\r\nThe Sense HAT has temperature, pressure and humidity sensors that can sense environment variables. Notice that the emulator has sliders you can move to change these values.\r\n\r\n![Sense Hat](./img/sliders.png)  \r\n\r\nYou can use this to test how your code responds to environmental variables. Have a look at the following trinket code that uses the temperature sensor:\r\n\r\nNow let use the temperature sensor on the board to make a kind of \"smart\" thermostat. Check out the following example that uses the temperature sensor: <a href=\"https://trinket.io/library/trinkets/cceba5489f\" target=\"_blank\">https://trinket.io/library/trinkets/cceba5489f</a>\r\n\r\n Run the example and you'll see the temperature printed in the lower console output window. Let's combine modify this simple example to use the temperature to do the following:\r\n + If the temperature greater than or equal to 25 degrees celcius print \"HOT!\" on the Sense Hat, otherwise print \"Fine!\" in green(i.e if it's below 25)   \r\n\r\nIn the trinket temperature example, replace the code in main.py with the following:  \r\n\r\n```python\r\nfrom sense_hat import SenseHat\r\n\r\nsense = SenseHat()\r\nsense.clear()\r\ngreen = (0, 255, 0)\r\nred = (255,0,0)\r\nwhile True:\r\n  temp = sense.get_temperature()\r\n  if temp >=25:\r\n    sense.show_message(\"HOT!\", text_colour = red)\r\n  else:\r\n    sense.show_message(\"Fine!\", text_colour = green)\r\n  print(temp)\r\n\r\n```\r\n\r\nNow we are using an environment variable (temperature) in our program to make a decision(i.e. decide if it's hot or not) and visually indicating this using the Sense Hat.\r\n\r\n## Internet of Things\r\nThis is a networking module so now lets stick some networking into the program and connect our emulated device to the internet.\r\nLet's presume this device is part of a network of environment sensors that need to send their data to a central messaging service.  \r\nIn this example, we will send our data to a \"channel\" on the Thingspeak platform. We can do this by programmatically sending a HTTP request with an encoded URL. This is similar to what you did in Web Dev with HTML forms except we're doing it programmatically using Python.\r\n\r\nUpdate your program with the following code:\r\n\r\n~~~ Python\r\nfrom sense_hat import SenseHat\r\nimport urllib.request\r\nimport time\r\n\r\n\r\nsense = SenseHat()\r\nsense.clear()\r\ngreen = (0, 255, 0)\r\nred = (255,0,0)\r\n#You'll need to update the following statement...\r\nserviceurl = 'https://api.thingspeak.com/update?field1=YOUR_DEVICE_NAME&api_key=USE_YOUR_OWN_OR_GET_IT_IN_CLASS>'\r\n\r\nwhile True:\r\n  temp = sense.get_temperature()\r\n  url = serviceurl + '&field2='+str(temp)\r\n  if temp >=25:\r\n    sense.show_message(\"HOT!\", text_colour = red)\r\n  else:\r\n    sense.show_message(\"Fine!\", text_colour = green)    \r\n  urllib.request.urlopen(url)\r\n  time.sleep(5)\r\n  print(temp)\r\n~~~\r\n\r\nReplace the *YOUR_DEVICE_NAME* with a unique name of your device (I'll leave that up to you) and replace *USE_YOUR_OWN_OR_GET_IT_IN_CLASS* with the api key given in class.\r\n\r\n## Want to do more...\r\n\r\nCreate an account at [https://thingspeak.com/](https://thingspeak.com/) and set up your own channel to receive data from your device.\r\n"
    }
  
  ]
  }

